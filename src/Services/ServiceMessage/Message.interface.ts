export namespace MessageInterface {
	export interface IAdapter {
		getWord(text: EWord, lang: ELang, arrReplace?: Array<string | number>): string;
		getSystemPromt(): Promise<string>;
		getSystemMassage(): Promise<string>;
		getSystemContext(): Promise<string>;
		getSystemStat(): Promise<string>;
	}

	export enum EWord {
		DAY_US_USDT = "DAY_US_USDT",
		STOCK = "STOCK",
		LEARN_DISC = "LEARN_DISC",
		CASH_OUT_DISC = "CASH_OUT_DISC",
		SEND_ALL_DISC = "SEND_ALL_DISC",
		ADD_AUTH_DISC = "ADD_AUTH_DISC",
		DEL_AUTH_DISC = "DEL_AUTH_DISC",
		TRANSFER_DISC = "TRANSFER_DISC",
		GET_BALANCE_DISC = "GET_BALANCE_DISC",
		GET_ALL_USER_DISC = "GET_ALL_USER_DISC",
		GET_MY_BALANCE_DISC = "GET_MY_BALANCE_DISC",
		SEND_MASSAGE_DISC = "SEND_MASSAGE_DISC",
		MESSAGE_SEND = "MESSAGE_SEND",
		MAILING_COMPLETE = "MAILING_COMPLETE",
		ID = "ID",
		NO = "NO",
		YES = "YES",
		SUB_UNTIL = "SUB_UNTIL",
		SUB_ACTIVE = "SUB_ACTIVE",
		CASH_OUT = "CASH_OUT",
		CHANNEL_LINK = "CHANNEL_LINK",
		BUY_BOT_SUBSCRIBE = "BUY_BOT_SUBSCRIBE",
		JOIN_CHANEL = "JOIN_CHANEL",
		PAY_THROTTLE = "PAY_THROTTLE",
		TRC20 = "TRC20",
		MAJOR_INSTRUCTION = "MAJOR_INSTRUCTION",
		MAJOR_HELLO = "MAJOR_HELLO",
		FOR_CAN_WORK = "FOR_CAN_WORK",
		YOUR_ID = "YOUR_ID",
		USDT = "USDT",
		SUBSCRIBE_PERIOD = "SUBSCRIBE_PERIOD",
		CHOICE_PAY_DAY = "CHOICE_PAY_DAY",
		USER_ADDED = "USER_ADDED",
		USER_DELETED = "USER_DELETED",
		BALANCE_DISC = "BALANCE_DISC",
		USER_NOT_FOUND = "USER_NOT_FOUND",
		START_DISC = "START_DISC",
		PAY_DISC = "PAY_DISC",
		TIME_LEFT = "TIME_LEFT",
		SUBSCRIBE_COMPLETE = "SUBSCRIBE_COMPLETE",
		PAY_ADDRESS = "PAY_ADDRESS",
		PAY_SUM = "PAY_SUM",
		PAY_INSTRUCTION = "PAY_INSTRUCTION",
		CLEAR_DISC = "CLEAR_DISC",
		HISTORY_CLEAN = "HISTORY_CLEAN",
		NO_AUTH = "NO_AUTH",
		SAVE_FILE = "SAVE_FILE",
		GET_FILE_INFO = "GET_FILE_INFO",
		DOWNLOADING_FILE = "DOWNLOADING_FILE",
		TEXT_WILL_BE_SAVE = "TEXT_WILL_BE_SAVE",
		SAVE_TEXT = "SAVE_TEXT",
		GET_TO_LLM = "GET_TO_LLM",
		PLEASE_CLEAR = "PLEASE_CLEAR",
	}

	export enum ELang {
		RU = "RU",
	}

	export type TDictionary = Record<EWord, TMapWord>;
	type TMapWord = Record<ELang, string>;
}
